{"title":"R and Rstudio","markdown":{"headingText":"R and Rstudio","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\nIn this course, we will be using R and Rstudio to e.g. visualize time series, estimate model parameters, forecast, etc. It is therefore essential to have some basic knowledge of how to write an R script and how to read in data and do some simple data manipulation for preparing the data for different time series analysis. Hopefully, most of you have some experience with R and Rstudio before. If you have, this will be a short recap, if not this will be a very short introduction covering the most basic operations. \n\n### Installing R and Rstudio{-}\n\n1. Install R:\n    - Go to: [cran.uib.no](https://cran.uib.no/)\n    - press download R for Linux/MacOS/Windows\n    - press base\n    - Download R-4.x.x for Linux/MacOS/Windows\n    - Run the installation using default options\n2. Install Rstudio\n    - Go to: [rstudio.com](https://www.rstudio.com/products/rstudio/)\n    - Select Rstudio desktop\n    - Press Download Rstudio desktop\n    - Select the Rstudio desktop with open source licence, which is free  \n    - Select the version for your operating system\n    - Run the installation using default settings\n3. Open Rstudio and check that it works (it should start without any error messages).\n4. Install the R-package of the book \"fpp3\". \n    - In Rstudio, select Tools -> Install packages -> write \"fpp3\" and make sure install dependencies is marked. Press Install. You can also run the following code in the console\n\n```{r, eval = FALSE}\ninstall.packages(\"fpp3\", dependencies = TRUE)\n```\n\nOther useful packages to install are\n```{r installreadxl, eval = FALSE}\ninstall.packages(\"readxl\")\n```\n\n## R recap {-}\n\nIf R and Rstudio are completely new tools for you, this section will probably not be detailed enough to get you started, but fear not. There are lots of good and useful online material for learning basic R. One possibility is to work through the first section of (chapter 1-8) of the book [R for data science](https://r4ds.had.co.nz/) by @wickham2016r available online. There is also a free Coursera course on [R programming](https://www.coursera.org/learn/r-programming), recommended by the textbook authors. \n\nWe will mostly be using the tidyverse approach to doing data manipulation. This is in line with what you learn in courses like BAN400 R programming for Data Science or BAN420 Introduction to R and also with what the authors of the textbook does (@hyndman2018).\n \nSay you are given an .xlsx file (MS excel format) of daily prices of an US 10 year Treasury bond. The excel file contains several sheets with the \n\n1. Closing ask price (\"Ask\")\n2. Closing bid price (\"Bid\")\n3. Closing mid price (\"Mid\")\n\nEach contains two columns: date and price. In the figure below we have taken a screen shot of the Mid sheet. \n\n![US 10-year treasure bonds index collected from the Refinitiv Eikon data base.](bilder/US10YT_screenshot.png)\n\nYou are interesting in reading in the closing mid price. To read in this data, you may use the following code.\n```{r readExcel, message = FALSE, warning = FALSE}\nlibrary(fpp3)   # loading textbook package\nlibrary(tidyverse)\nlibrary(readxl) # loading package for reading excel files\ndat <- read_excel(\"data/US10YTRR.xlsx\", sheet = \"Mid\")  \nhead(dat) # printing out the first 6 rows\n```\nThe sheet argument specifies which sheet in the excel file we want to read. The read_excel function is also quite smart so it recognizes that the date column is a date and automatically format it accordingly. It is however perhaps not so useful to also include the time of the day (all is 00:00:00), so let us remove this part.\n```{r transformDate}\ndat %>% \n  mutate(date = as.Date(date))\n```\nHere I have used the mutate function. This is a function we use to either mutate an existing column or create a new one. In this case we mutated the date column transforming it to a \"Date\" object. We could also be intersted in adding a column for which year the observation is from. \n```{r addYear}\ndat %>% \n  mutate(date = as.Date(date),\n         year = year(date))\n```\nHere we have used the year function from the *lubridate* package, which is loaded with the *fpp3* package. The operator *%>%* is used to add operations to the data manipulation pipeline in the given order. We start with the data object (a tibble) and add a mutate operation to that where we first transform the date column and add a year column. Now that we are pleased with our pipeline, let us save this to the *dat* object.\n```{r saveUpdates}\ndat <- dat %>% \n  mutate(date = as.Date(date),\n         year = year(date))\ndat %>% glimpse()\n```\nThe glimpse function summarizes the tibble/data frame.\n\n### filter and select {-}\n\nNow, the data ranges from/to\n```{r range}\nrange(dat$date)\n```\nbut say you only want to use data from 2010 onwards. To do this, we use the filter function. This function is useful for selecting rows that fulfil some condition, in this case year >= 2010. Let us make a pipeline for this\n```{r filterFunction}\ndat %>% \n  filter(year >= 2010)\n```\nSince 2022 is not a complete year (in the data), you also don't want observations after 2021. Then you can add this as an extra condition. \n```{r filterFunction2}\ndat %>% \n  filter(year >= 2010, year <=2021)\n```\nAlternatively, you can use the between function\n```{r filterFunction3, eval = FALSE}\ndat %>% \n  filter(between(year, 2010, 2021))\n```\nwhich will produce the same result. Another useful function is called select. While filter is used on the rows of your data, select is for columns. Say we don't need the year column after having filtered out the years we don't want. We can then either select the columns we want to keep\n```{r filterFunction4, eval = FALSE}\ndat %>% \n  filter(between(year, 2010, 2021)) %>%\n  select(date, price)\n```\nor remove the columns we do not want\n```{r filterFunction5, eval = TRUE}\ndat %>% \n  filter(between(year, 2010, 2021)) %>%\n  select(-year)\n```\n\n\n### group_by and summarize {-}\nSay we are interested in calculating the yearly mean price. In the tidyverse pipeline this means we want to group our observations according to year and summarize by year the mean of the observations. We will filter to avoid having the first and last years that are incomplete.\n\n```{r groupBySummarize}\ndat %>% \n  filter(between(year, 1988, 2021)) %>%\n  group_by(year) %>%\n  summarize(meanPrice = mean(price))\n```\nThis pipeline could be read as first we take out observations prior to 1988 and after 2021, then we group the observations according to year and summarize the mean price by year. Note that this operation will delete any columns that are not in the group_by or being calculated in the summarize. \n\n### ggplot {-}\nPlotting a data frame is convenient to do using the ggplot2 package. This will (when used appropriately) produce beautiful figures. Let us plot the time series at hand.  The ggplot2 follows the same logic with a pipeline, but instead of the %>% operator, we add elements to the figure using +. We need to specify the data object and the name of the x and y columns to be plotted. Everything in the figure that is to vary based on values in the data frame needs to be wrapped in a aes (aesthetic) function (here the x and y arguments). By adding the geom_line() we insert a line. \n\n```{r ggplot1}\nggplot(data = dat, \n       aes(x=date, y = price)) +\n  geom_line()\n```\n\nWe could instead add geom_point()\n```{r ggplot2}\n ggplot(data = dat,\n        aes(x=date, y = price)) +\n   geom_point()\n```\n or do both\n```{r ggplot3}\n ggplot(data = dat,\n        aes(x=date, y = price)) +\n   geom_line() +\n   geom_point()\n```\n We can change the colors and decrease the size of the points:\n```{r ggplot4}\n ggplot(data = dat,\n        aes(x=date, y = price)) +\n   geom_line(color = \"blue\") +\n   geom_point(color = \"green\", size = .2)\n```\nOr maybe we do not want to use the default theme: -->\n```{r ggplot5}\n ggplot(data = dat,\n        aes(x=date, y = price)) +\n   geom_line(color = \"blue\") +\n   geom_point(color = \"green\", size = .2) +\n   theme_bw()\n```\nWe can also include the plotting in our data manipulation pipeline. For instance, lets summarize the data by year and plot the resulting yearly time series.\n```{r ggplot6}\ndat %>%\n  filter(between(year, 1988, 2021)) %>%\n  group_by(year) %>%\n  summarize(meanPrice = mean(price)) %>%\n  # adding plotting to pipeline:\n  ggplot(aes(x=year, y = meanPrice)) +\n  geom_line(color = \"blue\") +\n  geom_point(color = \"green\") +\n  theme_bw()\n```\n\n### Epilogue {-}\nWe cannot illustrate all aspects here, but you will learn new elements by studying examples throughout the course. This recap is mostly for remembering the basics of data manipulation in R and simple plotting. As you will see in the continuation, the coding is not much more complex then what you have seen here and the fpp3 package uses the same type of logic and syntax as the tidyverse. There will however be some new functions specific for time series analysis that you will need to learn.\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"css":["style.css"],"html-math-method":"katex","output-file":"randrstudio.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","bibliography":["references.bib"],"sidebar":{"style":"docked","alignment":"left","border":true,"logo":"bilder/nhh.png","number-depth":3},"editor":"visual","body-footer":"Sondre Hølleland\n","margin-header":"<a href=\"https://www.nhh.no/\"><img src=\"bilder/nhh.png\" width=\"240\"></a>\n","toc-title":"Chapter contents","toc-location":"left","theme":["cosmo","custom.scss"],"fontsize":"1.1em","linestretch":1.7},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"randrstudio.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"sidebar":{"style":"docked","alignment":"left","border":true,"logo":"bilder/nhh.png","number-depth":3},"editor":"visual","body-footer":"Sondre Hølleland\n","margin-header":"<a href=\"https://www.nhh.no/\"><img src=\"bilder/nhh.png\" width=\"240\"></a>\n","documentclass":"scrreprt"},"extensions":{"book":{}}}}}