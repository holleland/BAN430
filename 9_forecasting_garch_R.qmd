## Forecasting volatility in R

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(ggplot2)
theme_set(theme_bw() + theme(panel.grid.minor = element_blank(), 
                             panel.grid.major = element_blank(),
                             strip.placement = "outside",
                             strip.background = element_rect(fill = "white", 
                                                             color = "transparent")))
library(rugarch)
library(tidyquant) # Package getting stock data
library(tidyverse)
library(fpp3)
MSFT <- tq_get("MSFT", 
               get = "stock.prices",
               from = as.Date("2015-01-01")) %>% 
  select(date, close) %>% 
  mutate(tradingday = row_number()) %>% 
  as_tsibble(index = tradingday) %>% 
  mutate(return = difference(close)/close)
```

The fable package that we are using for everything else does not cover volatility modeling. We could maybe trick it, by using the ARMA representation of a GARCH model and back-transforming the estimates to the GARCH parameters, but this is not very convenient. It is also useful for you as students to see something other than the tidy packages. 

We use a package called [rugarch](https://cran.r-project.org/web/packages/rugarch/rugarch.pdf) for fitting and forecasting GARCH models. You find the vignette *Introduction to the rugarch package* [here](https://cran.r-project.org/web/packages/rugarch/vignettes/Introduction_to_the_rugarch_package.pdf). Install and load the package.
```{r, eval = FALSE, echo = T}
install.packages("rugarch")
library(rugarch)
``` 

We continue with the Microsoft closing price returns as example. We cannot use the tsibble structure with the functions from this packages, so we will transform the Microsoft data to an *xts* object. This is also a time series object. We leave 200 observations for testing.
```{r}
MSFT <- MSFT %>% filter(!is.na(return)) # Removing NAs
msft <- xts(MSFT$return,          # values of time series
            order.by = MSFT$date) # dates of time series

train <- msft[1:(length(msft)-200)]
```

We start by specifying the model. In this case, we want to fit a GARCH(1,1) without mean. We use a Gaussian assumption on the distribution of $\varepsilon_t$. We do not want to use a model for the mean, and therefore explicitly state that the arma-order is (0,0). 
```{r, echo = T}
model <- ugarchspec(variance.model = list(model = "sGARCH", 
                                          garchOrder = c(1,1)),
                    mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
                    distribution.model = "norm")

```

Once we have the specification ready, we can fit the model, using the *ugarchfit* function. This need a model spec and the data. 
```{r, echo = T}
fit <- ugarchfit(spec = model, 
                 data = train)
```
Let's look at the model output:
```{r, echo =TRUE}
print(fit)
```
It is very long with a lot of test results, but the main infromation is the parameter estimates. In this case, we estimate a model with $\omega = 0.000019$, $\alpha_1 = 0.162506$ and $\beta_1 = 0.783419$. Note that $\alpha_1+\beta_1 = 0.946 <1$, indicating that we have a stationary GARCH(1,1) model (given other model assumptions are fulfilled). 

Let's plot the time series with the fitted $\sigma_t$ as a confidence interval. 
```{r, echo =TRUE}
plot(fit, which = 1)
```

The plotting function has many plots, which can be specified using the *which* argument. You can also run *plot(fit)* and select from a list of 12 plots in the console, many of which can be used to assess the residuals. The list of plots are given below. 

```{r, eval = FALSE, echo =TRUE}
Make a plot selection (or 0 to exit): 

 1:   Series with 2 Conditional SD Superimposed
 2:   Series with 1% VaR Limits
 3:   Conditional SD (vs |returns|)
 4:   ACF of Observations
 5:   ACF of Squared Observations
 6:   ACF of Absolute Observations
 7:   Cross Correlation
 8:   Empirical Density of Standardized Residuals
 9:   QQ-Plot of Standardized Residuals
10:   ACF of Standardized Residuals
11:   ACF of Squared Standardized Residuals
12:   News-Impact Curve
```

Let's look the residual related plots:
```{r, echo =T}
par(mfrow = c(2,2))
plot(fit, which = 8)
plot(fit, which = 9)
plot(fit, which = 10)
plot(fit, which = 11)
```
We can see some heavy tail behavor. Maybe we should try a t-distribution instead.
```{r, echo =T}
model2 <- ugarchspec(variance.model = list(model = "sGARCH", 
                                          garchOrder = c(1,1)),
                    mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
                    distribution.model = "std")
fit2 <- ugarchfit(spec = model2, 
                 data = train)
par(mfrow = c(2,2))
plot(fit2, which = 8)
plot(fit2, which = 9)
plot(fit2, which = 10)
plot(fit2, which = 11)
```

This looks much better. Let us use this as our model and forecast 10 steps ahead.

```{r, echo = FALSE, eval = FALSE}
fc <- ugarchforecast(fit2, 
                     n.ahead = 100)
plot(fc, which = 1)
```

In this case, width of the prediction interval is slowly increasing. We can have a look at the long term forecast, increasing the n.ahead to 500. 
```{r, echo = FALSE, eval = FALSE}
fc500 <- ugarchforecast(fit2, 
                     n.ahead = 500)
plot(fc500, which = 1)
```

The ugarchforecast function also has a rolling forecast option, which is more relevant in this context. The point is to do a short term forecast, but add information as time goes by. The argument n.roll controlls how many rolling forecast should be performed and needs to be run with the out.sample argument, which holds out observations for the forecast. We need to set out.sample $\ge$ n.roll. 

```{r, echo = T}
spec = getspec(fit2);
setfixed(spec) <- as.list(coef(fit2));
fc <- ugarchforecast(spec, 
                     data = msft,
                     n.ahead = 1, 
                     n.roll = 200,
                     out.sample =200)
plot(fc, which = 2)
```

Clearly, you get more dynamics by doing a rolling forecast, than forecasting 100 steps ahead. This is also the typical application. How will the return distribution of a stock look like tomorrow? 

We can also calculate accuracy measures on forecast. This is more relevant for ARMA-GARCH models. 
```{r, echo = T}
fpm(fc) # forecast performance measures
```

We can simulate from a fitted model using the *ugarchsim* function. Check out the help file. 

## ARMA-GARCH
We can also fit a ARMA-GARCH model to the data. 
```{r, echo = T}
model3 <- ugarchspec(variance.model = list(model = "sGARCH", 
                                          garchOrder = c(1,1)),
                    mean.model = list(armaOrder = c(1,1), include.mean = TRUE),
                    distribution.model = "std")
fit3 <- ugarchfit(spec = model3, 
                 data = train)

```
You should of course, check model assumption by considering the residuals. Let's just check out the forecast. 
```{r echo = T}
spec = getspec(fit3);
setfixed(spec) <- as.list(coef(fit3));
fc3 <- ugarchforecast(spec, 
                     data = msft,
                     n.ahead = 1, 
                     n.roll = 200,
                     out.sample =200)
plot(fc3, which = 2)
rbind("GARCH"=fpm(fc),
      "ARMA-GARCH"=fpm(fc3))
```
It seems the pure GARCH model is better, except for the directional accuracy. Accurately predicting the return of tomorrows is difficult. But there may be other contexts where an ARMA-GARCH model is more suited.



## Exercise 

1. Fit a ARCH(r), with $r=1,2,3$ model to Microsoft data and compare AIC with the GARCH(1,1). Would this any of these models be an improvement in terms of AIC?

2. Choose another stock and fit an ARCH(1) and a GARCH(1,1) model to that. Consider using a t-distribution instead of normal for the residuals. 



## References {.unnumbered}

- Engle, R. F. (1982). Autoregressive conditional heteroscedasticity with estimates of the variance of United Kingdom inflation. Econometrica: Journal of the econometric society, 987-1007.
- McNeil, A. J., Frey, R., & Embrechts, P. (2005). Quantitative risk management: concepts, techniques and tools-revised edition. Princeton university press.
